PA 8.4 - Minimum Spanning Tree (Prims)

Given a connected graph G, find the minimum spanning tree of a graph. 
Write a program in C++ for Prim's Minimum Spanning Tree (MST) algorithm.


Input: Number of vertices in G and Adjacency matrix A of graph G, with the value at A[i,j] is the weight of the edge joining vertex i and vertex j. 


Output:  Edge (vertex i -- vertex  j ) and weight of the edge in the below format: 

i -- j  w


Note: The vertex are numbered from 0 to n-1, where n is the total number of vertices.



Example: 

Input:

5

0 2 0 6 0

2 0 3 8 5

0 3 0 0 7

6 8 0 0 9

0 5 7 9 0

Output:

0 -- 1 2

1 -- 2 3

0 -- 3 6

1 -- 4 5



The following function should store MST in array.  Assuming the vertex 0 as source.

int* prim(int** graph,int no_of_vertices); 

This function should return an array of length V arr[i] stores the parent of ith vertex. For source vertex arr[0] = -1

Sample Test Cases
Input	Output
Test Case 1	
5
0 2 0 6 0
2 0 3 8 5
0 3 0 0 7
6 8 0 0 9
0 5 7 9 0
0 -- 1 2
1 -- 2 3
0 -- 3 6
1 -- 4 5
Test Case 2	
3
0 4 0
4 0 1
0 1 0
0 -- 1 4
1 -- 2 1
Test Case 3	
5
0 0 10 7 0
0 0 0 32 0
10 0 0 9 0
7 32 9 0 23
0 0 0 23 0
3 -- 1 32
3 -- 2 9
0 -- 3 7
3 -- 4 23
Test Case 4	
9
0 4 0 0 0 0 0 8 0
4 0 8 0 0 0 0 11 0
0 8 0 7 0 4 0 0 2
0 0 7 0 9 14 0 0 0
0 0 0 9 0 10 0 0 0
0 0 4 0 10 0 2 0 0 
0 0 0 14 0 2 0 1 6
8 11 0 0 0 0 1 0 7
0 0 2 0 0 0 6 7 0
0 -- 1 4
1 -- 2 8
2 -- 3 7
3 -- 4 9
2 -- 5 4
5 -- 6 2
6 -- 7 1
2 -- 8 2
Test Case 5	
4
0 4 0 0
4 0 1 2
0 1 0 0
0 2 0 0
0 -- 1 4
1 -- 2 1
1 -- 3 2
Test Case 6	
5
0 1 4 0 0
1 0 2 0 0
4 2 0 24 67
0 0 24 0 100
0 0 67 100 0
0 -- 1 1
1 -- 2 2
2 -- 3 24
2 -- 4 67
Test Case 7	
6
0 1 4 0 0 1
1 0 2 0 0 0
4 2 0 24 67 2
0 0 24 0 100 0
0 0 67 100 0 3
1 0 2 0 3 0
0 -- 1 1
1 -- 2 2
2 -- 3 24
5 -- 4 3
0 -- 5 1
Test Case 8	
5
0 0 15 12 0
0 0 0 37 0
15 0 0 14 0
12 32 14 0 28
0 0 0 28 0
3 -- 1 37
3 -- 2 14
0 -- 3 12
3 -- 4 28
Test Case 9	
5
0 24 0 25 10
24 0 9 11 30
0 9 0 8 0
25 11 8 0 28
10 39 0 28 0
0 -- 1 24
1 -- 2 9
2 -- 3 8
0 -- 4 10
Test Case 10	
4
0 10 0 0
10 0 1 20
0 1 0 0
0 20 0 0
0 -- 1 10
1 -- 2 1
1 -- 3 20
